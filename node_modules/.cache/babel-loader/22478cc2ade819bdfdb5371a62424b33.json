{"remainingRequest":"/Users/nsi/WebstormProjects/nso2024/node_modules/thread-loader/dist/cjs.js!/Users/nsi/WebstormProjects/nso2024/node_modules/babel-loader/lib/index.js!/Users/nsi/WebstormProjects/nso2024/node_modules/vuetify/lib/mixins/activatable/index.js","dependencies":[{"path":"/Users/nsi/WebstormProjects/nso2024/node_modules/vuetify/lib/mixins/activatable/index.js","mtime":1699635613596},{"path":"/Users/nsi/WebstormProjects/nso2024/node_modules/cache-loader/dist/cjs.js","mtime":1687175967744},{"path":"/Users/nsi/WebstormProjects/nso2024/node_modules/thread-loader/dist/cjs.js","mtime":1687175968065},{"path":"/Users/nsi/WebstormProjects/nso2024/node_modules/babel-loader/lib/index.js","mtime":1699635618036}],"contextDependencies":[],"result":["function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n// Mixins\nimport Delayable from '../delayable';\nimport Toggleable from '../toggleable'; // Utilities\n\nimport mixins from '../../util/mixins';\nimport { getSlot, getSlotType } from '../../util/helpers';\nimport { consoleError } from '../../util/console';\nvar baseMixins = mixins(Delayable, Toggleable);\n/* @vue/component */\n\nexport default baseMixins.extend({\n  name: 'activatable',\n  props: {\n    activator: {\n      default: null,\n      validator: function validator(val) {\n        return ['string', 'object'].includes(_typeof(val));\n      }\n    },\n    disabled: Boolean,\n    internalActivator: Boolean,\n    openOnHover: Boolean\n  },\n  data: function data() {\n    return {\n      // Do not use this directly, call getActivator() instead\n      activatorElement: null,\n      activatorNode: [],\n      events: ['click', 'mouseenter', 'mouseleave'],\n      listeners: {}\n    };\n  },\n  watch: {\n    activator: 'resetActivator',\n    openOnHover: 'resetActivator'\n  },\n  mounted: function mounted() {\n    var slotType = getSlotType(this, 'activator', true);\n\n    if (slotType && ['v-slot', 'normal'].includes(slotType)) {\n      consoleError(\"The activator slot must be bound, try '<template v-slot:activator=\\\"{ on }\\\"><v-btn v-on=\\\"on\\\">'\", this);\n    }\n\n    this.addActivatorEvents();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.removeActivatorEvents();\n  },\n  methods: {\n    addActivatorEvents: function addActivatorEvents() {\n      if (!this.activator || this.disabled || !this.getActivator()) return;\n      this.listeners = this.genActivatorListeners();\n      var keys = Object.keys(this.listeners);\n\n      for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {\n        var key = _keys[_i];\n        this.getActivator().addEventListener(key, this.listeners[key]);\n      }\n    },\n    genActivator: function genActivator() {\n      var node = getSlot(this, 'activator', Object.assign(this.getValueProxy(), {\n        on: this.genActivatorListeners(),\n        attrs: this.genActivatorAttributes()\n      })) || [];\n      this.activatorNode = node;\n      return node;\n    },\n    genActivatorAttributes: function genActivatorAttributes() {\n      return {\n        role: 'button',\n        'aria-haspopup': true,\n        'aria-expanded': String(this.isActive)\n      };\n    },\n    genActivatorListeners: function genActivatorListeners() {\n      var _this = this;\n\n      if (this.disabled) return {};\n      var listeners = {};\n\n      if (this.openOnHover) {\n        listeners.mouseenter = function (e) {\n          _this.getActivator(e);\n\n          _this.runDelay('open');\n        };\n\n        listeners.mouseleave = function (e) {\n          _this.getActivator(e);\n\n          _this.runDelay('close');\n        };\n      } else {\n        listeners.click = function (e) {\n          var activator = _this.getActivator(e);\n\n          if (activator) activator.focus();\n          _this.isActive = !_this.isActive;\n        };\n      }\n\n      return listeners;\n    },\n    getActivator: function getActivator(e) {\n      // If we've already fetched the activator, re-use\n      if (this.activatorElement) return this.activatorElement;\n      var activator = null;\n\n      if (this.activator) {\n        var target = this.internalActivator ? this.$el : document;\n\n        if (typeof this.activator === 'string') {\n          // Selector\n          activator = target.querySelector(this.activator);\n        } else if (this.activator.$el) {\n          // Component (ref)\n          activator = this.activator.$el;\n        } else {\n          // HTMLElement | Element\n          activator = this.activator;\n        }\n      } else if (e) {\n        // Activated by a click event\n        activator = e.currentTarget || e.target;\n      } else if (this.activatorNode.length) {\n        // Last resort, use the contents of the activator slot\n        var vm = this.activatorNode[0].componentInstance;\n\n        if (vm && vm.$options.mixins && //                         Activatable is indirectly used via Menuable\n        vm.$options.mixins.some(function (m) {\n          return m.options && ['activatable', 'menuable'].includes(m.options.name);\n        })) {\n          // Activator is actually another activatible component, use its activator (#8846)\n          activator = vm.getActivator();\n        } else {\n          activator = this.activatorNode[0].elm;\n        }\n      }\n\n      this.activatorElement = activator;\n      return this.activatorElement;\n    },\n    getContentSlot: function getContentSlot() {\n      return getSlot(this, 'default', this.getValueProxy(), true);\n    },\n    getValueProxy: function getValueProxy() {\n      var self = this;\n      return {\n        get value() {\n          return self.isActive;\n        },\n\n        set value(isActive) {\n          self.isActive = isActive;\n        }\n\n      };\n    },\n    removeActivatorEvents: function removeActivatorEvents() {\n      if (!this.activator || !this.activatorElement) return;\n      var keys = Object.keys(this.listeners);\n\n      for (var _i2 = 0, _keys2 = keys; _i2 < _keys2.length; _i2++) {\n        var key = _keys2[_i2];\n        this.activatorElement.removeEventListener(key, this.listeners[key]);\n      }\n\n      this.listeners = {};\n    },\n    resetActivator: function resetActivator() {\n      this.activatorElement = null;\n      this.getActivator();\n      this.addActivatorEvents();\n    }\n  }\n});",{"version":3,"sources":["../../../src/mixins/activatable/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Mixins\nimport Delayable from '../delayable'\nimport Toggleable from '../toggleable'\n\n// Utilities\nimport mixins from '../../util/mixins'\nimport { getSlot, getSlotType } from '../../util/helpers'\nimport { consoleError } from '../../util/console'\n\n// Types\nimport { PropValidator } from 'vue/types/options'\nimport { VNode } from 'vue'\n\nconst baseMixins = mixins(\n  Delayable,\n  Toggleable\n)\n\n/* @vue/component */\nexport default baseMixins.extend({\n  name: 'activatable',\n\n  props: {\n    activator: {\n      default: null,\n      validator: (val: string | object) => {\n        return ['string', 'object'].includes(typeof val)\n      },\n    } as PropValidator<string | HTMLElement | VNode | Element | null>,\n    disabled: Boolean,\n    internalActivator: Boolean,\n    openOnHover: Boolean,\n  },\n\n  data: () => ({\n    // Do not use this directly, call getActivator() instead\n    activatorElement: null as HTMLElement | null,\n    activatorNode: [] as VNode[],\n    events: ['click', 'mouseenter', 'mouseleave'],\n    listeners: {} as Record<string, (e: MouseEvent & KeyboardEvent) => void>,\n  }),\n\n  watch: {\n    activator: 'resetActivator',\n    openOnHover: 'resetActivator',\n  },\n\n  mounted () {\n    const slotType = getSlotType(this, 'activator', true)\n\n    if (slotType && ['v-slot', 'normal'].includes(slotType)) {\n      consoleError(`The activator slot must be bound, try '<template v-slot:activator=\"{ on }\"><v-btn v-on=\"on\">'`, this)\n    }\n\n    this.addActivatorEvents()\n  },\n\n  beforeDestroy () {\n    this.removeActivatorEvents()\n  },\n\n  methods: {\n    addActivatorEvents () {\n      if (\n        !this.activator ||\n        this.disabled ||\n        !this.getActivator()\n      ) return\n\n      this.listeners = this.genActivatorListeners()\n      const keys = Object.keys(this.listeners)\n\n      for (const key of keys) {\n        this.getActivator()!.addEventListener(key, this.listeners[key] as any)\n      }\n    },\n    genActivator () {\n      const node = getSlot(this, 'activator', Object.assign(this.getValueProxy(), {\n        on: this.genActivatorListeners(),\n        attrs: this.genActivatorAttributes(),\n      })) || []\n\n      this.activatorNode = node\n\n      return node\n    },\n    genActivatorAttributes () {\n      return {\n        role: 'button',\n        'aria-haspopup': true,\n        'aria-expanded': String(this.isActive),\n      }\n    },\n    genActivatorListeners () {\n      if (this.disabled) return {}\n\n      const listeners: Record<string, (e: MouseEvent & KeyboardEvent) => void> = {}\n\n      if (this.openOnHover) {\n        listeners.mouseenter = (e: MouseEvent) => {\n          this.getActivator(e)\n          this.runDelay('open')\n        }\n        listeners.mouseleave = (e: MouseEvent) => {\n          this.getActivator(e)\n          this.runDelay('close')\n        }\n      } else {\n        listeners.click = (e: MouseEvent) => {\n          const activator = this.getActivator(e)\n          if (activator) activator.focus()\n\n          this.isActive = !this.isActive\n        }\n      }\n\n      return listeners\n    },\n    getActivator (e?: Event): HTMLElement | null {\n      // If we've already fetched the activator, re-use\n      if (this.activatorElement) return this.activatorElement\n\n      let activator = null\n\n      if (this.activator) {\n        const target = this.internalActivator ? this.$el : document\n\n        if (typeof this.activator === 'string') {\n          // Selector\n          activator = target.querySelector(this.activator)\n        } else if ((this.activator as any).$el) {\n          // Component (ref)\n          activator = (this.activator as any).$el\n        } else {\n          // HTMLElement | Element\n          activator = this.activator\n        }\n      } else if (e) {\n        // Activated by a click event\n        activator = (e.currentTarget || e.target) as HTMLElement\n      } else if (this.activatorNode.length) {\n        // Last resort, use the contents of the activator slot\n        const vm = this.activatorNode[0].componentInstance\n        if (\n          vm &&\n          vm.$options.mixins && //                         Activatable is indirectly used via Menuable\n          vm.$options.mixins.some((m: any) => m.options && ['activatable', 'menuable'].includes(m.options.name))\n        ) {\n          // Activator is actually another activatible component, use its activator (#8846)\n          activator = (vm as any).getActivator()\n        } else {\n          activator = this.activatorNode[0].elm as HTMLElement\n        }\n      }\n\n      this.activatorElement = activator\n\n      return this.activatorElement\n    },\n    getContentSlot () {\n      return getSlot(this, 'default', this.getValueProxy(), true)\n    },\n    getValueProxy (): object {\n      const self = this\n      return {\n        get value () {\n          return self.isActive\n        },\n        set value (isActive: boolean) {\n          self.isActive = isActive\n        },\n      }\n    },\n    removeActivatorEvents () {\n      if (\n        !this.activator ||\n        !this.activatorElement\n      ) return\n\n      const keys = Object.keys(this.listeners)\n\n      for (const key of keys) {\n        (this.activatorElement as any).removeEventListener(key, this.listeners[key])\n      }\n\n      this.listeners = {}\n    },\n    resetActivator () {\n      this.activatorElement = null\n      this.getActivator()\n      this.addActivatorEvents()\n    },\n  },\n})\n"],"sourceRoot":""}]}