{"remainingRequest":"/Users/nsi/WebstormProjects/nso2024/node_modules/thread-loader/dist/cjs.js!/Users/nsi/WebstormProjects/nso2024/node_modules/babel-loader/lib/index.js!/Users/nsi/WebstormProjects/nso2024/node_modules/vuetify/lib/components/VCalendar/util/events.js","dependencies":[{"path":"/Users/nsi/WebstormProjects/nso2024/node_modules/vuetify/lib/components/VCalendar/util/events.js","mtime":1699635613596},{"path":"/Users/nsi/WebstormProjects/nso2024/node_modules/cache-loader/dist/cjs.js","mtime":1687175967744},{"path":"/Users/nsi/WebstormProjects/nso2024/node_modules/thread-loader/dist/cjs.js","mtime":1687175968065},{"path":"/Users/nsi/WebstormProjects/nso2024/node_modules/babel-loader/lib/index.js","mtime":1699635618036}],"contextDependencies":[],"result":["import { parseTimestamp, getDayIdentifier, getTimestampIdentifier } from './timestamp';\nexport function parseEvent(input, index, startProperty, endProperty) {\n  if (!(startProperty in input)) {\n    throw new Error('The ' + startProperty + ' property is required on all events to be a valid timestamp in the format YYYY-MM-DD or YYYY-MM-DD hh:mm');\n  }\n\n  var start = parseTimestamp(input[startProperty]);\n  var end = input[endProperty] ? parseTimestamp(input[endProperty]) : start;\n  var startIdentifier = getDayIdentifier(start);\n  var startTimestampIdentifier = getTimestampIdentifier(start);\n  var endIdentifier = getDayIdentifier(end);\n  var endTimestampIdentifier = getTimestampIdentifier(end);\n  var allDay = !start.hasTime;\n  return {\n    input: input,\n    start: start,\n    startIdentifier: startIdentifier,\n    startTimestampIdentifier: startTimestampIdentifier,\n    end: end,\n    endIdentifier: endIdentifier,\n    endTimestampIdentifier: endTimestampIdentifier,\n    allDay: allDay,\n    index: index\n  };\n}\nexport function isEventOn(event, dayIdentifier) {\n  return dayIdentifier >= event.startIdentifier && dayIdentifier <= event.endIdentifier;\n}\nexport function isEventOverlapping(event, startIdentifier, endIdentifier) {\n  return startIdentifier <= event.endIdentifier && endIdentifier >= event.startIdentifier;\n}",{"version":3,"sources":["../../../../src/components/VCalendar/util/events.ts"],"names":[],"mappings":"AAAA,SAAA,cAAA,EAAA,gBAAA,EAAA,sBAAA,QAAA,aAAA;AAuBA,OAAM,SAAA,UAAA,CAAA,KAAA,EAAA,KAAA,EAAA,aAAA,EAAA,WAAA,EAAmG;AACvG,MAAI,EAAE,aAAa,IAAnB,KAAI,CAAJ,EAA+B;AAC7B,UAAM,IAAA,KAAA,CAAU,SAAA,aAAA,GAAhB,0GAAM,CAAN;AACD;;AAED,MAAM,KAAK,GAAe,cAAc,CAAC,KAAK,CAA9C,aAA8C,CAAN,CAAxC;AACA,MAAM,GAAG,GAAgB,KAAK,CAAL,WAAK,CAAL,GAAqB,cAAc,CAAC,KAAK,CAAzC,WAAyC,CAAN,CAAnC,GAAzB,KAAA;AACA,MAAM,eAAe,GAAW,gBAAgB,CAAhD,KAAgD,CAAhD;AACA,MAAM,wBAAwB,GAAW,sBAAsB,CAA/D,KAA+D,CAA/D;AACA,MAAM,aAAa,GAAW,gBAAgB,CAA9C,GAA8C,CAA9C;AACA,MAAM,sBAAsB,GAAW,sBAAsB,CAA7D,GAA6D,CAA7D;AACA,MAAM,MAAM,GAAY,CAAC,KAAK,CAA9B,OAAA;AAEA,SAAO;AAAE,IAAA,KAAF,EAAE,KAAF;AAAS,IAAA,KAAT,EAAS,KAAT;AAAgB,IAAA,eAAhB,EAAgB,eAAhB;AAAiC,IAAA,wBAAjC,EAAiC,wBAAjC;AAA2D,IAAA,GAA3D,EAA2D,GAA3D;AAAgE,IAAA,aAAhE,EAAgE,aAAhE;AAA+E,IAAA,sBAA/E,EAA+E,sBAA/E;AAAuG,IAAA,MAAvG,EAAuG,MAAvG;AAA+G,IAAA,KAAA,EAAA;AAA/G,GAAP;AACD;AAED,OAAM,SAAA,SAAA,CAAA,KAAA,EAAA,aAAA,EAA+D;AACnE,SAAO,aAAa,IAAI,KAAK,CAAtB,eAAA,IAA0C,aAAa,IAAI,KAAK,CAAvE,aAAA;AACD;AAED,OAAM,SAAA,kBAAA,CAAA,KAAA,EAAA,eAAA,EAAA,aAAA,EAAiG;AACrG,SAAO,eAAe,IAAI,KAAK,CAAxB,aAAA,IAA0C,aAAa,IAAI,KAAK,CAAvE,eAAA;AACD","sourcesContent":["import {\n  VTimestamp,\n  parseTimestamp,\n  getDayIdentifier,\n  getTimestampIdentifier,\n} from './timestamp'\n\nexport interface VEventInput {\n  [prop: string]: any\n}\n\nexport interface VEventParsed {\n  input: VEventInput\n  start: VTimestamp\n  startIdentifier: number\n  startTimestampIdentifier: number\n  end: VTimestamp\n  endIdentifier: number\n  endTimestampIdentifier: number\n  allDay: boolean\n  index: number\n}\n\nexport function parseEvent (input: VEventInput, index: number, startProperty: string, endProperty: string): VEventParsed {\n  if (!(startProperty in input)) {\n    throw new Error('The ' + startProperty + ' property is required on all events to be a valid timestamp in the format YYYY-MM-DD or YYYY-MM-DD hh:mm')\n  }\n\n  const start: VTimestamp = parseTimestamp(input[startProperty]) as VTimestamp\n  const end: VTimestamp = (input[endProperty] ? parseTimestamp(input[endProperty]) : start) as VTimestamp\n  const startIdentifier: number = getDayIdentifier(start)\n  const startTimestampIdentifier: number = getTimestampIdentifier(start)\n  const endIdentifier: number = getDayIdentifier(end)\n  const endTimestampIdentifier: number = getTimestampIdentifier(end)\n  const allDay: boolean = !start.hasTime\n\n  return { input, start, startIdentifier, startTimestampIdentifier, end, endIdentifier, endTimestampIdentifier, allDay, index }\n}\n\nexport function isEventOn (event: VEventParsed, dayIdentifier: number): boolean {\n  return dayIdentifier >= event.startIdentifier && dayIdentifier <= event.endIdentifier\n}\n\nexport function isEventOverlapping (event: VEventParsed, startIdentifier: number, endIdentifier: number): boolean {\n  return startIdentifier <= event.endIdentifier && endIdentifier >= event.startIdentifier\n}\n"],"sourceRoot":""}]}