{"remainingRequest":"/Users/nsi/WebstormProjects/nso-2025-final/node_modules/thread-loader/dist/cjs.js!/Users/nsi/WebstormProjects/nso-2025-final/node_modules/babel-loader/lib/index.js!/Users/nsi/WebstormProjects/nso-2025-final/node_modules/vuetify/lib/components/VTreeview/VTreeview.js","dependencies":[{"path":"/Users/nsi/WebstormProjects/nso-2025-final/node_modules/vuetify/lib/components/VTreeview/VTreeview.js","mtime":1700005597783},{"path":"/Users/nsi/WebstormProjects/nso-2025-final/node_modules/cache-loader/dist/cjs.js","mtime":1700005595258},{"path":"/Users/nsi/WebstormProjects/nso-2025-final/node_modules/thread-loader/dist/cjs.js","mtime":1700005597519},{"path":"/Users/nsi/WebstormProjects/nso-2025-final/node_modules/babel-loader/lib/index.js","mtime":1700005595170}],"contextDependencies":[],"result":["function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Styles\nimport \"../../../src/components/VTreeview/VTreeview.sass\"; // Components\n\nimport VTreeviewNode, { VTreeviewNodeProps } from './VTreeviewNode'; // Mixins\n\nimport Themeable from '../../mixins/themeable';\nimport { provide as RegistrableProvide } from '../../mixins/registrable'; // Utils\n\nimport { arrayDiff, deepEqual, getObjectValueByPath } from '../../util/helpers';\nimport mixins from '../../util/mixins';\nimport { consoleWarn } from '../../util/console';\nimport { filterTreeItems, filterTreeItem } from './util/filterTreeItems';\nexport default mixins(RegistrableProvide('treeview'), Themeable\n/* @vue/component */\n).extend({\n  name: 'v-treeview',\n  provide: function provide() {\n    return {\n      treeview: this\n    };\n  },\n  props: _objectSpread({\n    active: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    dense: Boolean,\n    filter: Function,\n    hoverable: Boolean,\n    items: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    multipleActive: Boolean,\n    open: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    openAll: Boolean,\n    returnObject: {\n      type: Boolean,\n      default: false\n    },\n    search: String,\n    selectionType: {\n      type: String,\n      default: 'leaf',\n      validator: function validator(v) {\n        return ['leaf', 'independent'].includes(v);\n      }\n    },\n    value: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  }, VTreeviewNodeProps),\n  data: function data() {\n    return {\n      activeCache: new Set(),\n      nodes: {},\n      openCache: new Set(),\n      selectedCache: new Set()\n    };\n  },\n  computed: {\n    excludedItems: function excludedItems() {\n      var excluded = new Set();\n      if (!this.search) return excluded;\n\n      for (var i = 0; i < this.items.length; i++) {\n        filterTreeItems(this.filter || filterTreeItem, this.items[i], this.search, this.itemKey, this.itemText, this.itemChildren, excluded);\n      }\n\n      return excluded;\n    }\n  },\n  watch: {\n    items: {\n      handler: function handler() {\n        var _this = this;\n\n        var oldKeys = Object.keys(this.nodes).map(function (k) {\n          return getObjectValueByPath(_this.nodes[k].item, _this.itemKey);\n        });\n        var newKeys = this.getKeys(this.items);\n        var diff = arrayDiff(newKeys, oldKeys); // We only want to do stuff if items have changed\n\n        if (!diff.length && newKeys.length < oldKeys.length) return; // If nodes are removed we need to clear them from this.nodes\n\n        diff.forEach(function (k) {\n          return delete _this.nodes[k];\n        });\n\n        var oldSelectedCache = _toConsumableArray(this.selectedCache);\n\n        this.selectedCache = new Set();\n        this.activeCache = new Set();\n        this.openCache = new Set();\n        this.buildTree(this.items); // Only emit selected if selection has changed\n        // as a result of items changing. This fixes a\n        // potential double emit when selecting a node\n        // with dynamic children\n\n        if (!deepEqual(oldSelectedCache, _toConsumableArray(this.selectedCache))) this.emitSelected();\n      },\n      deep: true\n    },\n    active: function active(value) {\n      this.handleNodeCacheWatcher(value, this.activeCache, this.updateActive, this.emitActive);\n    },\n    value: function value(_value) {\n      this.handleNodeCacheWatcher(_value, this.selectedCache, this.updateSelected, this.emitSelected);\n    },\n    open: function open(value) {\n      this.handleNodeCacheWatcher(value, this.openCache, this.updateOpen, this.emitOpen);\n    }\n  },\n  created: function created() {\n    var _this2 = this;\n\n    this.buildTree(this.items);\n    this.value.forEach(function (key) {\n      return _this2.updateSelected(key, true);\n    });\n    this.active.forEach(function (key) {\n      return _this2.updateActive(key, true);\n    });\n  },\n  mounted: function mounted() {\n    var _this3 = this;\n\n    // Save the developer from themselves\n    if (this.$slots.prepend || this.$slots.append) {\n      consoleWarn('The prepend and append slots require a slot-scope attribute', this);\n    }\n\n    if (this.openAll) {\n      this.updateAll(true);\n    } else {\n      this.open.forEach(function (key) {\n        return _this3.updateOpen(key, true);\n      });\n      this.emitOpen();\n    }\n  },\n  methods: {\n    /** @public */\n    updateAll: function updateAll(value) {\n      var _this4 = this;\n\n      Object.keys(this.nodes).forEach(function (key) {\n        return _this4.updateOpen(getObjectValueByPath(_this4.nodes[key].item, _this4.itemKey), value);\n      });\n      this.emitOpen();\n    },\n    getKeys: function getKeys(items) {\n      var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n      for (var i = 0; i < items.length; i++) {\n        var key = getObjectValueByPath(items[i], this.itemKey);\n        keys.push(key);\n        var children = getObjectValueByPath(items[i], this.itemChildren);\n\n        if (children) {\n          keys.push.apply(keys, _toConsumableArray(this.getKeys(children)));\n        }\n      }\n\n      return keys;\n    },\n    buildTree: function buildTree(items) {\n      var _this5 = this;\n\n      var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n        var key = getObjectValueByPath(item, this.itemKey);\n        var children = getObjectValueByPath(item, this.itemChildren, []);\n        var oldNode = this.nodes.hasOwnProperty(key) ? this.nodes[key] : {\n          isSelected: false,\n          isIndeterminate: false,\n          isActive: false,\n          isOpen: false,\n          vnode: null\n        };\n        var node = {\n          vnode: oldNode.vnode,\n          parent: parent,\n          children: children.map(function (c) {\n            return getObjectValueByPath(c, _this5.itemKey);\n          }),\n          item: item\n        };\n        this.buildTree(children, key); // This fixed bug with dynamic children resetting selected parent state\n\n        if (!this.nodes.hasOwnProperty(key) && parent !== null && this.nodes.hasOwnProperty(parent)) {\n          node.isSelected = this.nodes[parent].isSelected;\n          node.isIndeterminate = this.nodes[parent].isIndeterminate;\n        } else {\n          node.isSelected = oldNode.isSelected;\n          node.isIndeterminate = oldNode.isIndeterminate;\n        }\n\n        node.isActive = oldNode.isActive;\n        node.isOpen = oldNode.isOpen;\n        this.nodes[key] = !children.length ? node : this.calculateState(node, this.nodes); // Don't forget to rebuild cache\n\n        if (this.nodes[key].isSelected) this.selectedCache.add(key);\n        if (this.nodes[key].isActive) this.activeCache.add(key);\n        if (this.nodes[key].isOpen) this.openCache.add(key);\n        this.updateVnodeState(key);\n      }\n    },\n    calculateState: function calculateState(node, state) {\n      var counts = node.children.reduce(function (counts, child) {\n        counts[0] += +Boolean(state[child].isSelected);\n        counts[1] += +Boolean(state[child].isIndeterminate);\n        return counts;\n      }, [0, 0]);\n      node.isSelected = !!node.children.length && counts[0] === node.children.length;\n      node.isIndeterminate = !node.isSelected && (counts[0] > 0 || counts[1] > 0);\n      return node;\n    },\n    emitOpen: function emitOpen() {\n      this.emitNodeCache('update:open', this.openCache);\n    },\n    emitSelected: function emitSelected() {\n      this.emitNodeCache('input', this.selectedCache);\n    },\n    emitActive: function emitActive() {\n      this.emitNodeCache('update:active', this.activeCache);\n    },\n    emitNodeCache: function emitNodeCache(event, cache) {\n      var _this6 = this;\n\n      this.$emit(event, this.returnObject ? _toConsumableArray(cache).map(function (key) {\n        return _this6.nodes[key].item;\n      }) : _toConsumableArray(cache));\n    },\n    handleNodeCacheWatcher: function handleNodeCacheWatcher(value, cache, updateFn, emitFn) {\n      var _this7 = this;\n\n      value = this.returnObject ? value.map(function (v) {\n        return getObjectValueByPath(v, _this7.itemKey);\n      }) : value;\n\n      var old = _toConsumableArray(cache);\n\n      if (deepEqual(old, value)) return;\n      old.forEach(function (key) {\n        return updateFn(key, false);\n      });\n      value.forEach(function (key) {\n        return updateFn(key, true);\n      });\n      emitFn();\n    },\n    getDescendants: function getDescendants(key) {\n      var _descendants;\n\n      var descendants = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var children = this.nodes[key].children;\n\n      (_descendants = descendants).push.apply(_descendants, _toConsumableArray(children));\n\n      for (var i = 0; i < children.length; i++) {\n        descendants = this.getDescendants(children[i], descendants);\n      }\n\n      return descendants;\n    },\n    getParents: function getParents(key) {\n      var parent = this.nodes[key].parent;\n      var parents = [];\n\n      while (parent !== null) {\n        parents.push(parent);\n        parent = this.nodes[parent].parent;\n      }\n\n      return parents;\n    },\n    register: function register(node) {\n      var key = getObjectValueByPath(node.item, this.itemKey);\n      this.nodes[key].vnode = node;\n      this.updateVnodeState(key);\n    },\n    unregister: function unregister(node) {\n      var key = getObjectValueByPath(node.item, this.itemKey);\n      if (this.nodes[key]) this.nodes[key].vnode = null;\n    },\n    isParent: function isParent(key) {\n      return this.nodes[key].children && this.nodes[key].children.length;\n    },\n    updateActive: function updateActive(key, isActive) {\n      var _this8 = this;\n\n      if (!this.nodes.hasOwnProperty(key)) return;\n\n      if (!this.multipleActive) {\n        this.activeCache.forEach(function (active) {\n          _this8.nodes[active].isActive = false;\n\n          _this8.updateVnodeState(active);\n\n          _this8.activeCache.delete(active);\n        });\n      }\n\n      var node = this.nodes[key];\n      if (!node) return;\n      if (isActive) this.activeCache.add(key);else this.activeCache.delete(key);\n      node.isActive = isActive;\n      this.updateVnodeState(key);\n    },\n    updateSelected: function updateSelected(key, isSelected) {\n      var _this9 = this;\n\n      if (!this.nodes.hasOwnProperty(key)) return;\n      var changed = new Map();\n\n      if (this.selectionType !== 'independent') {\n        var descendants = [key].concat(_toConsumableArray(this.getDescendants(key)));\n        descendants.forEach(function (descendant) {\n          _this9.nodes[descendant].isSelected = isSelected;\n          _this9.nodes[descendant].isIndeterminate = false;\n          changed.set(descendant, isSelected);\n        });\n        var parents = this.getParents(key);\n        parents.forEach(function (parent) {\n          _this9.nodes[parent] = _this9.calculateState(_this9.nodes[parent], _this9.nodes);\n          changed.set(parent, _this9.nodes[parent].isSelected);\n        });\n      } else {\n        this.nodes[key].isSelected = isSelected;\n        this.nodes[key].isIndeterminate = false;\n        changed.set(key, isSelected);\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = changed.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              _key = _step$value[0],\n              value = _step$value[1];\n\n          this.updateVnodeState(_key);\n          if (this.selectionType === 'leaf' && this.isParent(_key)) continue;\n          value === true ? this.selectedCache.add(_key) : this.selectedCache.delete(_key);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    },\n    updateOpen: function updateOpen(key, isOpen) {\n      var _this10 = this;\n\n      if (!this.nodes.hasOwnProperty(key)) return;\n      var node = this.nodes[key];\n      var children = getObjectValueByPath(node.item, this.itemChildren);\n\n      if (children && !children.length && node.vnode && !node.vnode.hasLoaded) {\n        node.vnode.checkChildren().then(function () {\n          return _this10.updateOpen(key, isOpen);\n        });\n      } else if (children && children.length) {\n        node.isOpen = isOpen;\n        node.isOpen ? this.openCache.add(key) : this.openCache.delete(key);\n        this.updateVnodeState(key);\n      }\n    },\n    updateVnodeState: function updateVnodeState(key) {\n      var node = this.nodes[key];\n\n      if (node && node.vnode) {\n        node.vnode.isSelected = node.isSelected;\n        node.vnode.isIndeterminate = node.isIndeterminate;\n        node.vnode.isActive = node.isActive;\n        node.vnode.isOpen = node.isOpen;\n      }\n    },\n    isExcluded: function isExcluded(key) {\n      return !!this.search && this.excludedItems.has(key);\n    }\n  },\n  render: function render(h) {\n    var children = this.items.length ? this.items.map(VTreeviewNode.options.methods.genChild.bind(this))\n    /* istanbul ignore next */\n    : this.$slots.default; // TODO: remove type annotation with TS 3.2\n\n    return h('div', {\n      staticClass: 'v-treeview',\n      class: _objectSpread({\n        'v-treeview--hoverable': this.hoverable,\n        'v-treeview--dense': this.dense\n      }, this.themeClasses)\n    }, children);\n  }\n});",{"version":3,"sources":["../../../src/components/VTreeview/VTreeview.ts"],"names":[],"mappings":"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","sourcesContent":["// Styles\nimport './VTreeview.sass'\n\n// Types\nimport { VNode, VNodeChildrenArrayContents } from 'vue'\nimport { PropValidator } from 'vue/types/options'\n\n// Components\nimport VTreeviewNode, { VTreeviewNodeProps } from './VTreeviewNode'\n\n// Mixins\nimport Themeable from '../../mixins/themeable'\nimport { provide as RegistrableProvide } from '../../mixins/registrable'\n\n// Utils\nimport {\n  arrayDiff,\n  deepEqual,\n  getObjectValueByPath,\n} from '../../util/helpers'\nimport mixins from '../../util/mixins'\nimport { consoleWarn } from '../../util/console'\nimport {\n  filterTreeItems,\n  FilterTreeItemFunction,\n  filterTreeItem,\n} from './util/filterTreeItems'\n\ntype VTreeviewNodeInstance = InstanceType<typeof VTreeviewNode>\n\ntype NodeCache = Set<string | number>\ntype NodeArray = (string | number)[]\n\ntype NodeState = {\n  parent: number | string | null\n  children: (number | string)[]\n  vnode: VTreeviewNodeInstance | null\n  isActive: boolean\n  isSelected: boolean\n  isIndeterminate: boolean\n  isOpen: boolean\n  item: any\n}\n\nexport default mixins(\n  RegistrableProvide('treeview'),\n  Themeable\n  /* @vue/component */\n).extend({\n  name: 'v-treeview',\n\n  provide (): object {\n    return { treeview: this }\n  },\n\n  props: {\n    active: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<NodeArray>,\n    dense: Boolean,\n    filter: Function as PropValidator<FilterTreeItemFunction>,\n    hoverable: Boolean,\n    items: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<any[]>,\n    multipleActive: Boolean,\n    open: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<NodeArray>,\n    openAll: Boolean,\n    returnObject: {\n      type: Boolean,\n      default: false, // TODO: Should be true in next major\n    },\n    search: String,\n    selectionType: {\n      type: String,\n      default: 'leaf',\n      validator: (v: string) => ['leaf', 'independent'].includes(v),\n    } as PropValidator<'leaf' | 'independent'>,\n    value: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<NodeArray>,\n    ...VTreeviewNodeProps,\n  },\n\n  data: () => ({\n    activeCache: new Set() as NodeCache,\n    nodes: {} as Record<string | number, NodeState>,\n    openCache: new Set() as NodeCache,\n    selectedCache: new Set() as NodeCache,\n  }),\n\n  computed: {\n    excludedItems (): Set<string | number> {\n      const excluded = new Set<string|number>()\n\n      if (!this.search) return excluded\n\n      for (let i = 0; i < this.items.length; i++) {\n        filterTreeItems(\n          this.filter || filterTreeItem,\n          this.items[i],\n          this.search,\n          this.itemKey,\n          this.itemText,\n          this.itemChildren,\n          excluded\n        )\n      }\n\n      return excluded\n    },\n  },\n\n  watch: {\n    items: {\n      handler () {\n        const oldKeys = Object.keys(this.nodes).map(k => getObjectValueByPath(this.nodes[k].item, this.itemKey))\n        const newKeys = this.getKeys(this.items)\n        const diff = arrayDiff(newKeys, oldKeys)\n\n        // We only want to do stuff if items have changed\n        if (!diff.length && newKeys.length < oldKeys.length) return\n\n        // If nodes are removed we need to clear them from this.nodes\n        diff.forEach(k => delete this.nodes[k])\n\n        const oldSelectedCache = [...this.selectedCache]\n        this.selectedCache = new Set()\n        this.activeCache = new Set()\n        this.openCache = new Set()\n        this.buildTree(this.items)\n\n        // Only emit selected if selection has changed\n        // as a result of items changing. This fixes a\n        // potential double emit when selecting a node\n        // with dynamic children\n        if (!deepEqual(oldSelectedCache, [...this.selectedCache])) this.emitSelected()\n      },\n      deep: true,\n    },\n    active (value: (string | number | any)[]) {\n      this.handleNodeCacheWatcher(value, this.activeCache, this.updateActive, this.emitActive)\n    },\n    value (value: (string | number | any)[]) {\n      this.handleNodeCacheWatcher(value, this.selectedCache, this.updateSelected, this.emitSelected)\n    },\n    open (value: (string | number | any)[]) {\n      this.handleNodeCacheWatcher(value, this.openCache, this.updateOpen, this.emitOpen)\n    },\n  },\n\n  created () {\n    this.buildTree(this.items)\n    this.value.forEach(key => this.updateSelected(key, true))\n    this.active.forEach(key => this.updateActive(key, true))\n  },\n\n  mounted () {\n    // Save the developer from themselves\n    if (this.$slots.prepend || this.$slots.append) {\n      consoleWarn('The prepend and append slots require a slot-scope attribute', this)\n    }\n\n    if (this.openAll) {\n      this.updateAll(true)\n    } else {\n      this.open.forEach(key => this.updateOpen(key, true))\n      this.emitOpen()\n    }\n  },\n\n  methods: {\n    /** @public */\n    updateAll (value: boolean) {\n      Object.keys(this.nodes).forEach(key => this.updateOpen(getObjectValueByPath(this.nodes[key].item, this.itemKey), value))\n      this.emitOpen()\n    },\n    getKeys (items: any[], keys: any[] = []) {\n      for (let i = 0; i < items.length; i++) {\n        const key = getObjectValueByPath(items[i], this.itemKey)\n        keys.push(key)\n        const children = getObjectValueByPath(items[i], this.itemChildren)\n        if (children) {\n          keys.push(...this.getKeys(children))\n        }\n      }\n\n      return keys\n    },\n    buildTree (items: any[], parent: (string | number | null) = null) {\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i]\n        const key = getObjectValueByPath(item, this.itemKey)\n        const children = getObjectValueByPath(item, this.itemChildren, [])\n        const oldNode = this.nodes.hasOwnProperty(key) ? this.nodes[key] : {\n          isSelected: false, isIndeterminate: false, isActive: false, isOpen: false, vnode: null,\n        } as NodeState\n\n        const node: any = {\n          vnode: oldNode.vnode,\n          parent,\n          children: children.map((c: any) => getObjectValueByPath(c, this.itemKey)),\n          item,\n        }\n\n        this.buildTree(children, key)\n\n        // This fixed bug with dynamic children resetting selected parent state\n        if (!this.nodes.hasOwnProperty(key) && parent !== null && this.nodes.hasOwnProperty(parent)) {\n          node.isSelected = this.nodes[parent].isSelected\n          node.isIndeterminate = this.nodes[parent].isIndeterminate\n        } else {\n          node.isSelected = oldNode.isSelected\n          node.isIndeterminate = oldNode.isIndeterminate\n        }\n\n        node.isActive = oldNode.isActive\n        node.isOpen = oldNode.isOpen\n\n        this.nodes[key] = !children.length ? node : this.calculateState(node, this.nodes)\n\n        // Don't forget to rebuild cache\n        if (this.nodes[key].isSelected) this.selectedCache.add(key)\n        if (this.nodes[key].isActive) this.activeCache.add(key)\n        if (this.nodes[key].isOpen) this.openCache.add(key)\n\n        this.updateVnodeState(key)\n      }\n    },\n    calculateState (node: NodeState, state: Record<string | number, NodeState>) {\n      const counts = node.children.reduce((counts: number[], child: string | number) => {\n        counts[0] += +Boolean(state[child].isSelected)\n        counts[1] += +Boolean(state[child].isIndeterminate)\n        return counts\n      }, [0, 0])\n\n      node.isSelected = !!node.children.length && counts[0] === node.children.length\n      node.isIndeterminate = !node.isSelected && (counts[0] > 0 || counts[1] > 0)\n\n      return node\n    },\n    emitOpen () {\n      this.emitNodeCache('update:open', this.openCache)\n    },\n    emitSelected () {\n      this.emitNodeCache('input', this.selectedCache)\n    },\n    emitActive () {\n      this.emitNodeCache('update:active', this.activeCache)\n    },\n    emitNodeCache (event: string, cache: NodeCache) {\n      this.$emit(event, this.returnObject ? [...cache].map(key => this.nodes[key].item) : [...cache])\n    },\n    handleNodeCacheWatcher (value: any[], cache: NodeCache, updateFn: Function, emitFn: Function) {\n      value = this.returnObject ? value.map(v => getObjectValueByPath(v, this.itemKey)) : value\n      const old = [...cache]\n      if (deepEqual(old, value)) return\n\n      old.forEach(key => updateFn(key, false))\n      value.forEach(key => updateFn(key, true))\n\n      emitFn()\n    },\n    getDescendants (key: string | number, descendants: NodeArray = []) {\n      const children = this.nodes[key].children\n\n      descendants.push(...children)\n\n      for (let i = 0; i < children.length; i++) {\n        descendants = this.getDescendants(children[i], descendants)\n      }\n\n      return descendants\n    },\n    getParents (key: string | number) {\n      let parent = this.nodes[key].parent\n\n      const parents = []\n      while (parent !== null) {\n        parents.push(parent)\n        parent = this.nodes[parent].parent\n      }\n\n      return parents\n    },\n    register (node: VTreeviewNodeInstance) {\n      const key = getObjectValueByPath(node.item, this.itemKey)\n      this.nodes[key].vnode = node\n\n      this.updateVnodeState(key)\n    },\n    unregister (node: VTreeviewNodeInstance) {\n      const key = getObjectValueByPath(node.item, this.itemKey)\n      if (this.nodes[key]) this.nodes[key].vnode = null\n    },\n    isParent (key: string | number) {\n      return this.nodes[key].children && this.nodes[key].children.length\n    },\n    updateActive (key: string | number, isActive: boolean) {\n      if (!this.nodes.hasOwnProperty(key)) return\n\n      if (!this.multipleActive) {\n        this.activeCache.forEach(active => {\n          this.nodes[active].isActive = false\n          this.updateVnodeState(active)\n          this.activeCache.delete(active)\n        })\n      }\n\n      const node = this.nodes[key]\n      if (!node) return\n\n      if (isActive) this.activeCache.add(key)\n      else this.activeCache.delete(key)\n\n      node.isActive = isActive\n\n      this.updateVnodeState(key)\n    },\n    updateSelected (key: string | number, isSelected: boolean) {\n      if (!this.nodes.hasOwnProperty(key)) return\n\n      const changed = new Map()\n\n      if (this.selectionType !== 'independent') {\n        const descendants = [key, ...this.getDescendants(key)]\n        descendants.forEach(descendant => {\n          this.nodes[descendant].isSelected = isSelected\n          this.nodes[descendant].isIndeterminate = false\n          changed.set(descendant, isSelected)\n        })\n\n        const parents = this.getParents(key)\n        parents.forEach(parent => {\n          this.nodes[parent] = this.calculateState(this.nodes[parent], this.nodes)\n          changed.set(parent, this.nodes[parent].isSelected)\n        })\n      } else {\n        this.nodes[key].isSelected = isSelected\n        this.nodes[key].isIndeterminate = false\n        changed.set(key, isSelected)\n      }\n\n      for (const [key, value] of changed.entries()) {\n        this.updateVnodeState(key)\n\n        if (this.selectionType === 'leaf' && this.isParent(key)) continue\n\n        value === true ? this.selectedCache.add(key) : this.selectedCache.delete(key)\n      }\n    },\n    updateOpen (key: string | number, isOpen: boolean) {\n      if (!this.nodes.hasOwnProperty(key)) return\n\n      const node = this.nodes[key]\n      const children = getObjectValueByPath(node.item, this.itemChildren)\n\n      if (children && !children.length && node.vnode && !node.vnode.hasLoaded) {\n        node.vnode.checkChildren().then(() => this.updateOpen(key, isOpen))\n      } else if (children && children.length) {\n        node.isOpen = isOpen\n\n        node.isOpen ? this.openCache.add(key) : this.openCache.delete(key)\n\n        this.updateVnodeState(key)\n      }\n    },\n    updateVnodeState (key: string | number) {\n      const node = this.nodes[key]\n\n      if (node && node.vnode) {\n        node.vnode.isSelected = node.isSelected\n        node.vnode.isIndeterminate = node.isIndeterminate\n        node.vnode.isActive = node.isActive\n        node.vnode.isOpen = node.isOpen\n      }\n    },\n    isExcluded (key: string | number) {\n      return !!this.search && this.excludedItems.has(key)\n    },\n  },\n\n  render (h): VNode {\n    const children: VNodeChildrenArrayContents = this.items.length\n      ? this.items.map(VTreeviewNode.options.methods.genChild.bind(this))\n      /* istanbul ignore next */\n      : this.$slots.default! // TODO: remove type annotation with TS 3.2\n\n    return h('div', {\n      staticClass: 'v-treeview',\n      class: {\n        'v-treeview--hoverable': this.hoverable,\n        'v-treeview--dense': this.dense,\n        ...this.themeClasses,\n      },\n    }, children)\n  },\n})\n"],"sourceRoot":""}]}